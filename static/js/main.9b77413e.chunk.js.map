{"version":3,"sources":["components/message.jsx","components/messageForm.jsx","api/wagonChat.jsx","actions/index.jsx","components/messageBar.jsx","containers/messageList.jsx","containers/channelList.jsx","components/app.jsx","reducers/messagesReducer.jsx","reducers/selectedChannelReducer.jsx","reducers/index.jsx","index.jsx"],"names":["strToRGB","str","hash","i","length","charCodeAt","c","toString","toUpperCase","substring","Message","props","message","author","content","created_at","className","style","color","ReactTimeAgo","date","Date","locale","MessageForm","renderInput","input","label","meta","width","placeholder","renderError","error","touched","role","initialValues","onSubmit","formValues","validate","errors","render","handleSubmit","name","component","axios","create","baseURL","GET_MESSAGES","POST_MESSAGE","SELECTED_CHANNEL","MessageBar","createMessage","currentUser","this","React","Component","connect","state","channel","dispatch","a","wagonChat","post","response","type","payload","data","MessageList","renderMessages","messages","map","id","list","createRef","setInterval","fetchMessages","selectedChannel","clearInterval","current","focus","scrollTop","scrollHeight","ref","get","ChannelList","handleClick","newSelectedChannel","renderChannels","channels","active","charAt","slice","onClick","App","backgroundColor","height","messagesReducer","action","selectedChannelReducer","identityReducer","reducers","combineReducers","TimeAgo","addDefaultLocale","en","initialState","window","prompt","middlewares","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","reduxThunk","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9b77413e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactTimeAgo from 'react-time-ago';\n\nfunction strToRGB(str) {\n  let hash = 0;\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  const c = (hash & 0x00FFFFFF)\n    .toString(16)\n    .toUpperCase();\n  return `#${\"00000\".substring(0, 6 - c.length)}${c}`;\n}\n\nconst Message = (props) => {\n  const { author, content, created_at } = props.message;\n  return (\n    <div className=\"card mb-3\">\n      <div className=\"card-body\">\n        <div className=\"d-inline-flex justify-content-between align-items-center w-100\">\n          <div className=\"d-flex flex-column justify-content-center\">\n            <span className=\"card-title\" style={{ color: strToRGB(author) }}>{author}</span>\n            <div className=\"card-subtitle\">{content}</div>\n          </div>\n          <div className=\"card-text text-muted\">\n            <ReactTimeAgo date={new Date(created_at)} locale='en-UK' />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Message;\n","import { Form, Field } from 'react-final-form'\n\nconst MessageForm = props => {\n  const validate = (formValues) => {\n    const errors = {};\n\n    if (!formValues.message) {\n      errors.message = 'You need to enter a message.';\n    }\n\n    return errors;\n  }\n\n  const renderInput = ({ input, label, meta }) => {\n    return (\n      <div style={{ width: 'inherit' }}>\n        {/* <label className='form-label my-3'>{label}</label> */}\n        <input placeholder={label} className='form-control mb-1' {...input} />\n        {renderError(meta)}\n      </div>\n    );\n  }\n\n  // function to display the errors on the form if any persist\n  const renderError = ({ error, touched }) => {\n    if (touched && error) {\n      return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          <p className=\"text-muted my-0\">{error}</p>\n        </div>\n      );\n    }\n  }\n\n  const onSubmit = formValues => {\n    props.onSubmit(formValues);\n  }\n\n  return (\n    <Form\n      initialValues={''}\n      onSubmit={onSubmit}\n      validate={validate}\n      render={({ handleSubmit }) => (\n        <form onSubmit={handleSubmit} className='my-3 d-inline-flex justify-content-evenly align-items-baseline w-100'>\n          <Field name='message' component={renderInput} label='Enter a Message' />\n          <button className=\"btn btn-outline-primary ms-1\">Send</button>\n        </form>\n      )}\n    />\n  );\n}\n\nexport default MessageForm;\n","import axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://wagon-chat.herokuapp.com/'\n})\n","// TODO: add and export your own actions\nimport wagonChat from '../api/wagonChat';\n\nexport const GET_MESSAGES = 'GET_MESSAGES';\nexport const POST_MESSAGE = 'POST_MESSAGE';\nexport const SELECTED_CHANNEL = 'SELECTED_CHANNEL';\n\nexport const fetchMessages = (channel) => async dispatch => {\n  const response = await wagonChat.get(`${channel}/messages`);\n\n  dispatch({ type: GET_MESSAGES, payload: response.data.messages });\n}\n\nexport const createMessage = (channel, author, content) => async dispatch => {\n  const response = await wagonChat.post(`${channel}/messages`, { author, content });\n\n  dispatch({ type: POST_MESSAGE, payload: response.data })\n}\n\nexport const newSelectedChannel = (channel) => {\n  return { type: SELECTED_CHANNEL, payload: channel }\n}\n","import React from 'react';\nimport MessageForm from './messageForm';\nimport { connect } from 'react-redux';\nimport { createMessage } from '../actions';\n\nclass MessageBar extends React.Component {\n  onSubmit = formValues => {\n    this.props.createMessage(\n      'general',\n      this.props.currentUser,\n      formValues.message\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"row justify-content-center\">\n        <div className=\"col-12\">\n          <MessageForm onSubmit={this.onSubmit} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { currentUser: state.currentUser }\n}\n\nexport default connect(mapStateToProps, { createMessage })(MessageBar)\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport Message from '../components/message';\nimport MessageBar from '../components/messageBar';\nimport { fetchMessages } from '../actions';\n\nclass MessageList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.list = React.createRef();\n  }\n\n  renderMessages = (messages) => {\n    return messages.map(message => {\n      return <Message message={message} key={message.id} />\n    })\n  }\n\n  componentDidMount() {\n    setInterval(() => {\n      this.props.fetchMessages(this.props.selectedChannel);\n    }, 5000);\n\n    clearInterval();\n  }\n\n  componentDidUpdate() {\n    const { current } = this.list;\n    current.focus();\n    current.scrollTop = current.scrollHeight;\n  }\n\n  render() {\n    const { messages } = this.props;\n    return (\n      <div className=\"row justify-content-center align-itesm-center mt-5\">\n        <h3 className=\"mb-5\">{`#${this.props.selectedChannel} Channel`}</h3>\n        <div className=\"col-6 col-md-10\" >\n          {this.renderMessages(messages)}\n        </div>\n        <div ref={ this.list } id=\"messageBar\">\n          <MessageBar />\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    messages: state.messages,\n    selectedChannel: state.selectedChannel\n  }\n}\n\nexport default connect(mapStateToProps, { fetchMessages })(MessageList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { newSelectedChannel } from '../actions';\n\nclass ChannelList extends React.Component {\n  handleClick = (channel) => {\n    this.props.newSelectedChannel(channel);\n  }\n\n  renderChannels = (channels) => {\n    return channels.map((channel) => {\n      let active = channel === this.props.selectedChannel ? 'active' : \"\";\n      const name = '#' + channel.charAt(0).toUpperCase() + channel.slice(1);\n      return (\n        <button\n          className={`btn btn-outline-success ${active}`}\n          key={channel}\n          onClick={() => this.handleClick(channel)}\n        >\n          {name}\n        </button>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex flex-column mt-5\">\n        <h3 className=\"mb-5\">Channel</h3>\n        <div className=\"btn-group-vertical\">\n          {this.renderChannels(this.props.channels)}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    channels: state.channels,\n    selectedChannel: state.selectedChannel\n  }\n}\n\nexport default connect(mapStateToProps, { newSelectedChannel })(ChannelList)\n","import React from 'react';\nimport MessageList from '../containers/messageList';\nimport ChannelList from '../containers/channelList';\n\nconst App = () => {\n  return (\n    <div className=\"app container h-100\"  style={{ backgroundColor: 'black'}}>\n      <div className=\"row\">\n        <div className=\"col-md-4  bg-light p-5\" style={{ height: '100vh' }}>\n          <ChannelList />\n        </div>\n        <div className=\"col-md-8  bg-white p-5\" style={{ height: '100vh' }}>\n          <MessageList />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { GET_MESSAGES } from '../actions/index';\nimport { POST_MESSAGE } from '../actions/index';\n\nconst messagesReducer = (state = [], action) => {\n  switch (action.type) {\n    case GET_MESSAGES:\n      return action.payload;\n    case POST_MESSAGE:\n      return [ ...state, action.payload ]\n    default:\n      return state;\n  }\n}\n\nexport default messagesReducer;\n","import { SELECTED_CHANNEL } from '../actions/index';\n\nconst selectedChannelReducer = (state = '', action) => {\n  switch (action.type) {\n    case SELECTED_CHANNEL:\n      return action.payload;\n    default:\n      return state;\n  }\n}\n\nexport default selectedChannelReducer;\n","import { combineReducers } from \"redux\";\nimport messagesReducer from \"./messagesReducer\";\nimport selectedChannelReducer from \"./selectedChannelReducer\";\n\nconst identityReducer = (state = null) => state;\n\nconst reducers = combineReducers({\n  messages: messagesReducer,\n  currentUser: identityReducer,\n  channels: identityReducer,\n  selectedChannel: selectedChannelReducer\n});\n\nexport default reducers;\n","// external modules\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport TimeAgo from 'javascript-time-ago';\nimport en from 'javascript-time-ago/locale/en';\n\n// internal modules\nimport App from './components/app';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport reducers from './reducers';\n\nTimeAgo.addDefaultLocale(en);\n\n// State and reducers\nconst messages = [\n  {\n    \"author\":\"anonymous92\",\n    \"content\":\"Hello world!\",\n    \"id\": '1',\n    \"created_at\":\"2017-09-26T23:03:16.365Z\"\n  },\n  {\n    \"author\":\"anonymous77\",\n    \"content\":\"My name is anonymous77\",\n    \"id\": '2',\n    \"created_at\":\"2017-09-26T23:03:21.194Z\"\n  }\n]\n\nconst initialState = {\n  messages,\n  currentUser: window.prompt('What is your username?' || `anonymous${Math.floor(10 + (Math.random() * 90))}`),\n  channels: ['general', 'react', 'edinburgh', 'javascript', 'help'],\n  selectedChannel: 'general'\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst middlewares = composeEnhancers(applyMiddleware(reduxThunk));\nconst store = createStore(reducers, initialState, middlewares);\n\n// render an instance of the component in the DOM\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}